openapi: 3.0.0
info:
  title: "WhichCafe API"
  version: "1.0.0"
components:
  schemas:
    UserSignUp:
      type: object
      properties:
        account:
          type: string
          description: 사용자의 계정명입니다.
          minLength: 3
          maxLength: 30
          pattern: '^(?=.*[a-zA-Z])(?=.*\d)[a-zA-Z\d]{3,30}$'
        password:
          type: string
          description: 사용자의 비밀번호입니다.
          minLength: 8
          maxLength: 64
          pattern: '^(?=.*[a-zA-Z])(?=.*\d)[a-zA-Z\d]{8,64}$'
        nickname:
          type: string
          description: 사용자의 닉네임입니다.
        question_answer:
          type: string
          description: 사용자의 보안 질문에 대한 답변입니다.
      required:
        - account
        - password
        - nickname
        - question_answer

    UserSignIn:
      type: object
      properties:
        account:
          type: string
          description: 로그인에 사용되는 사용자의 계정명입니다.
        password:
          type: string
          description: 로그인에 사용되는 사용자의 비밀번호입니다.
      required:
        - account
        - password

    UsersMyPage:
      type: object
      properties:
        account:
          type: string
          description: 유저의 계정 입니다.
        nickname:
          type: string
          description: 유저의 계정 닉네임 입니다.
        question_answer:
          type: string
          description: 유저의 계정보안 질문입니다.
      required:
        - account
        - nickname
        - question_answer

    UserUpdateInfo:
      type: object
      properties:
        password:
          type: string
          description: 유저가 변경할 새로운 비밀번호 입니다.
        nickname:
          type: string
          description: 유저가 변경할 새로운 닉네임 입니다.

    AccountRecovery:
      type: object
      properties:
        account:
          type: string
          description: 계정을 복구할 유저의 계정입니다.
        answer:
          type: string
          description: 계정복구에 필요한 답변입니다.
        editPassword:
          type: string
          description: 유저가 변경할 새로운 비밀번호 입니다.
      required:
        - account
        - answer
        - editPassword

    UserDelete:
      type: object
      properties:
        deleteMessage:
          type: string
          description: 계정을 삭제하기 위한 메세지입니다.
      required:
        - deleteMessage

    FavoriteCafe:
      type: object
      properties:
        name:
          type: string
          description: 즐겨찾기 항목에 있는 카페의 이름입니다.
        address:
          type: string
          description: 즐겨찾기 항목에 있는 카페의 주소입니다.
        score:
          type: string
          description: 즐겨찾기 항목에 있는 카페의 평점입니다.
        thumbnail:
          type: string
          description: 즐겨찾기 항목에 있는 카페의 프로필입니다.

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT 토큰을 사용한 Bearer 인증 스키마입니다. 인증을 위해서는 다음의 단계를 따르십시오:
        1. `/auth` 엔드포인트를 사용하여 로그인하고 JWT 토큰을 획득합니다.
        2. 인증이 필요한 각 요청에 대해 `Authorization` 헤더를 추가하십시오.
        3. `Authorization` 헤더 값은 'Bearer ' 다음에 획득한 토큰을 붙여 넣으십시오.

paths:
  /users/signup:
    post:
      summary: 회원가입
      requestBody:
        description: |
          회원가입을 하기 위해 필요한 정보입니다. 

          1. 유저의 계정은 최소 하나 이상의 알파벳 문자와 숫자가 포함되어야 하며, 알파벳 문자와 숫자만을 포함해야 합니다.
          2. 계정은 3자리에서 30자리 사이의 길이여야 합니다.
          3. 유저의 비밀번호는 최소 하나 이상의 알파벳 문자와 숫자, 특수문자가 포함되어야 합니다.
          4. 비밀번호는 8자리에서 64자리 사이의 길이여야 합니다.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSignUp"
            example:
              account: "testing1723"
              password: "taco!634("
              nickname: "tester"
              question_answer: "강남 초등학교"

      responses:
        "201":
          description: 계정이 성공적으로 등록되었습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 회원가입 성공 메시지
              example:
                message: "SIGNUP_SUCCESS"
        "400":
          description: 클라이언트의 잘못된 요청으로 인한 오류입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                keyError:
                  summary: "필수 키 누락"
                  value:
                    message: "KEY_ERROR"
                duplicatedAccount:
                  summary: "계정 중복"
                  value:
                    message: "DUPLICATED_ACCOUNT"
                invalidAccount:
                  summary: "유효성 검사 기준에 맞지 않는 계정"
                  value:
                    message: "INVALID ACCOUNT"
                invalidPassword:
                  summary: "유효성 검사 기준에 맞지 않는 비밀번호"
                  value:
                    message: "INVALID PASSWORD"
        "500":
          description: 웹 서버 내부의 데이터베이스에 의한 오류입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "SIGN_UP_ERROR"

  /users/signin:
    post:
      summary: 유저 로그인
      requestBody:
        description: |
          로그인을 하기위해 필요한 정보입니다. 

          회원의 계정, 비밀번호가 필요합니다.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSignIn"
            example:
              account: "testing1723"
              password: "taco!634("
      responses:
        "200":
          description: 성공적으로 로그인을 하였습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT토큰
              example:
                accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI5IkpXVCJ9.eyJpZCI2IjAwODY2YTRlLTU3YjAtMTFlZS07ZTc2LTQ0ODJjMTNmZjgyMCIsImlhdCI6MTY5NTIxNTUzMiwiZXhwIjoxNjk1MjE5MTMyfQ.y3URzAFbSdwDJxOVv7eTeSQ1-RAbVTLvgb7S6ELQSrc"
        "400":
          description: 클라이언트의 잘못된 요청으로 인한 오류입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 오류 메시지 설명입니다.
              examples:
                keyError:
                  summary: "필수 키 누락"
                  value:
                    message: "KEY_ERROR"
                WrongAccount:
                  summary: "계정 오류"
                  value:
                    message: "ACCOUNT DOES NOT EXIST OR INVALID PASSWORD"
                WrongPassword:
                  summary: "비밀번호 오류"
                  value:
                    message: "ACCOUNT DOES NOT EXIST OR INVALID PASSWORD"
        "500":
          description: 웹 서버 내부의 데이터베이스에 의한 오류입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
              examples:
                RetrieveUserError:
                  summary: "계정별 사용자 조회 실패"
                  value:
                    message: "GET_USER_BY_ACCOUNT_ERROR"
                CheckLoginDataError:
                  summary: "로그인 오류"
                  value:
                    message: "SIGN_IN_ERROR"

  /users/mypage:
    get:
      summary: 사용자 정보 조회
      description: 로그인된 사용자의 정보를 가져옵니다.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: 사용자 정보를 성공적으로 가져옴.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersMyPage"
              example:
                account: "testing1723"
                nickname: "tester"
                question_answer: "강남 초등학교"
        "401":
          description: 토큰 만료
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Token expired. Please refresh token"
        "500":
          description: 웹 서버 내부의 데이터베이스에 의한 오류입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "GET_USER_BY_ACCOUNT_ERROR"

    patch:
      summary: 사용자 정보 업데이트
      description: 사용자의 비밀번호나 닉네임을 업데이트합니다.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateInfo"
            example:
              password: "edittingpassword!"
              nickname: "editednickname"
      responses:
        "200":
          description: 사용자 정보를 성공적으로 가져옴.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 업데이트 성공 메시지
              example:
                message: "UPDATE_DATA_SUCCESS"
        "400":
          description: 클라이언트의 잘못된 요청으로 인한 오류입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                keyError:
                  summary: "필수 키 누락"
                  value:
                    message: "KEY_ERROR"
                checkCurrentNickname:
                  summary: "현재 닉네임과 동일"
                  value:
                    message: "YOUR NICKNAME IS SAME WITH CURRENT NICKNAME"
                checkUpdateField:
                  summary: "제공된 데이터가 없음"
                  value:
                    message: "NO UPDATE_DATA PROVIDED"
        "401":
          description: 토큰 만료
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Token expired. Please refresh token"
        "500":
          description: 웹 서버 내부의 데이터베이스에 의한 오류입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
              examples:
                retrieveAccountError:
                  summary: "계정별 사용자 조회 실패"
                  value:
                    message: "GET_USER_BY_ACCOUNT_ERROR"
                UpdateDBError:
                  summary: "유저 정보 업데이트 오류"
                  value:
                    message: "UPDATE_USERINFO_ERROR"

    delete:
      summary: 사용자 계정 삭제
      description: 사용자의 계정을 삭제합니다.
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDelete"
            example:
              deleteMessage: "동의합니다"
        required: true
      responses:
        "204":
          description: 사용자 계정이 성공적으로 삭제되었습니다.
        "400":
          description: 클라이언트의 잘못된 요청으로 인한 오류입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "MESSAGE DOES NOT MATCH"
        "401":
          description: 토큰 만료
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Token expired. Please refresh token"
        "500":
          description: 웹 서버 내부의 데이터베이스에 의한 오류입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "DELETE_ACCOUNT_ERROR"

  /users/search:
    patch:
      summary: 사용자 비밀번호 찾기
      description: |
        회원가입 질문을 통해 비밀번호를 변경합니다. 

        유저의 계정, 출신 초등학교, 수정할 비밀번호가 필요합니다.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountRecovery"
            example:
              account: "testing1723"
              answer: "강남 초등학교"
              editPassword: "searchPassword!"
        required: true
      responses:
        "200":
          description: 비밀번호가 성공적으로 변경되었습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 비밀번호 수정 성공 메시지
              example:
                message: "UPDATE_DATA_SUCCESS"
        "400":
          description: 클라이언트의 잘못된 요청으로 인한 오류입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                keyError:
                  summary: "필수 키 누락"
                  value:
                    message: "KEY_ERROR"
                wrongAnswer:
                  summary: "답변오류"
                  value:
                    message: "ANSWER OR ACCOUNT DOES NOT MATCH"
                inValidPassword:
                  summary: "유효성 검사 기준에 맞지 않는 비밀번호"
                  value:
                    message: "INVALID PASSWORD"
        "500":
          description: 웹 서버 내부의 데이터베이스에 의한 오류입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                keyError:
                  summary: "계정별 사용자 조회 실패"
                  value:
                    message: "GET_USER_BY_ACCOUNT_ERROR"
                wrongAnswer:
                  summary: "유저 정보 업데이트 실패"
                  value:
                    message: "UPDATE_USERINFO_ERROR"

  /users/favorites/{cafeId}:
    post:
      summary: 즐겨찾기 목록에 카페 추가
      description: 카페목록에 있는 카페를 즐겨찾기에 추가합니다.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: cafeId
          required: true
          schema:
            type: integer
          description: 즐겨찾기에 추가할 카페의 id값 입니다.
      responses:
        "201":
          description: 카페정보가 즐겨찾기에 성공적으로 추가되었습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 비밀번호 수정 성공 메시지
              example:
                message: "ADD_FAVORITES_SUCCESS"
        "400":
          description: 클라이언트의 잘못된 요청으로 인한 오류입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                keyError:
                  summary: "필수 키 누락"
                  value:
                    message: "KEY_ERROR"
                duplicatedFavorites:
                  summary: "이미 즐겨찾기에 추가된 카페"
                  value:
                    message: "FAVOIRTES ALREADY REGISTERED"
        "401":
          description: 토큰 만료
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Token expired. Please refresh token"
        "500":
          description: 웹 서버 내부의 데이터베이스에 의한 오류입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
              examples:
                retrieveUserIdError:
                  summary: "계정 ID 조회 실패"
                  value:
                    message: "GET_ID_ERROR"
                addFavoritesError:
                  summary: "즐겨찾기 추가 오류"
                  value:
                    message: "ADD_FAVORITES_ERROR"

    delete:
      summary: 즐겨찾기 항목의 카페 삭제
      description: 유저 계정의 즐겨찾기 항목에 있는 카페를 삭제합니다.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: cafeId
          required: true
          schema:
            type: integer
          description: 즐겨찾기에서 삭제할 카페의 id값 입니다.
      responses:
        "204":
          description: 즐겨찾기 항목에 있는 카페가 성공적으로 삭제되었습니다.
        "400":
          description: 클라이언트의 잘못된 요청으로 인한 오류입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "KEY_ERROR"
        "401":
          description: 토큰 만료
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Token expired. Please refresh token"
        "404":
          description: 즐겨찾기 목록에 데이터가 존재하지 않습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "FAVORITES_DATA NOT EXIST"
        "500":
          description: 웹 서버 내부의 데이터베이스에 의한 오류입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
              examples:
                RetrieveUserIdError:
                  summary: "계정 ID 조회 실패"
                  value:
                    message: "GET_ID_ERROR"
                DeleteDataError:
                  summary: "즐겨찾기 데이터 삭제 오류"
                  value:
                    message: "DELETE_FAVORITES_ERROR"

security:
  - BearerAuth: []
