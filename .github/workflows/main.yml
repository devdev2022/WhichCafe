# .github/workflows/deploy.yml
name: CI

env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/nuxt-auto-deploy
  VERSION: ${{ github.sha }}
  NAME: go_cicd

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "20.1.0"

      - name: Cache Node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # node_modules 캐시 경로
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm ci

      - name: Build Docker Image
        run: docker build -t $DOCKER_IMAGE:$VERSION .

      - name: Clean up Docker Images and Containers
        run: |
          # Docker 이미지와 컨테이너 정리 스크립트
          docker container prune -f --filter "until=168h"
          docker image prune -a -f --filter "until=168h"

      - name: Start Docker Container for Testing
        run: |
          docker run -d --name my-app-test-container -p 80:3000 \
          -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
          -e PORT=3000 \
          -e DB_CONNECTION=mysql \
          -e DB_HOST=${{ secrets.DB_HOST }} \
          -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
          -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          -e DB_DATABASE=WhichCafe \
          -e SALT_ROUNDS=${{ secrets.SALT_ROUNDS }} \
          -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
          -e GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
          -e SWAGGER_USERNAME=${{ secrets.SWAGGER_USERNAME }} \
          -e SWAGGER_PASSWORD=${{ secrets.SWAGGER_PASSWORD }} \
          -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          -e AWS_REGION=${{ secrets.AWS_REGION }} \
          $DOCKER_IMAGE:$VERSION

      - name: Performance Test
        run: npm run test:performance

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Push Docker Image to GHCR
        run: docker push $DOCKER_IMAGE:$VERSION

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKER_IMAGE,VERSION
          script: |
            echo "Deploying with the following parameters:"
            echo "DOCKER_IMAGE: $DOCKER_IMAGE"
            echo "VERSION: $VERSION"

            docker pull $DOCKER_IMAGE:$VERSION || echo "Failed to pull Docker image: $DOCKER_IMAGE:$VERSION"

            docker stop my-app || true

            docker run -d --restart unless-stopped --name my-app -p 80:3000 \
            -e MYSQL_HOST=${{ secrets.DB_HOST }} \
            -e MYSQL_PORT=3306 \
            -e MYSQL_USERNAME=${{ secrets.DB_USERNAME }} \
            -e MYSQL_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e MYSQL_DATABASE=${{ secrets.DB_DATABASE }} \
            -e PORT=3000 \
            -e SWAGGER_USERNAME=${{ secrets.SWAGGER_USERNAME }} \
            -e SWAGGER_PASSWORD=${{ secrets.SWAGGER_PASSWORD }} \
            -e SALT_ROUNDS=${{ secrets.SALT_ROUNDS }} \
            -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
            -e JWT_REFRESH_SECRET_KEY=${{ secrets.JWT_REFRESH_SECRET_KEY }} \
            $DOCKER_IMAGE:$VERSION \
            -e GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }} \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            -v /etc/localtime:/etc/localtime:ro \

            if ! docker ps | grep -q my-app; then 
              echo "Docker container is not running"
              exit 1
            fi

      - name: Get previous Docker image version
        if: failure() # Only run if the previous step failed
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          echo $GITHUB_TOKEN | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          TAGS=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" https://ghcr.io/v2/${{ github.repository }}/my-app/tags/list | jq -r '.tags[]' | sort -r)

          LATEST_TAG=${{ github.sha }}
          PREVIOUS_TAG=""
          for TAG in $TAGS; do
            if [ "$TAG" != "$LATEST_TAG" ]; then
              PREVIOUS_TAG=$TAG
              break
            fi
          done

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found to rollback to."
            exit 1
          fi

          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV

      - name: Rollback if deployment failed
        if: ${{ failure() }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Deployment failed! Rolling back to previous version..."
            # 환경 변수에서 이전 태그 값 사용
            PREVIOUS_VERSION=${{ env.PREVIOUS_TAG }}
            docker pull $DOCKER_IMAGE:$PREVIOUS_VERSION
            docker stop my-app || true
            docker rm my-app || true
            docker run -d --restart unless-stopped --name my-app -p 80:8080 \
            -e MYSQL_HOST=${{ secrets.DB_HOST }} \
            -e MYSQL_USERNAME=${{ secrets.DB_USERNAME }} \
            -e MYSQL_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e MYSQL_DATABASE=WhichCafe \
            $DOCKER_IMAGE:$PREVIOUS_VERSION
